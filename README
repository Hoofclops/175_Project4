README

Brandon Nguyen, 998346889, brhnguyen@ucdavis.edu

All parts of program were implemented.

Known Bugs:
-Im not sure if this is a bug but my gouraud shading seems to produce odd results such as a line across a triangle face that seems inconsistent with the lighting variables
-If inputting commands seems to do nothing, you need to restart the program.  I think the problem is that occasionally there are extra values left over in the buffer that messes with the current input command

////////////////////////////////////////////////////////////////////
Program Instructions:
-run Makefile with 'make', executable named a.out
-run a.out
-Hit the 'i' key while in the GLUT window to enter command mode, terminal will ask for command input
-Coordinate 0,0 located at origin of each subwindow
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
Commands:
-load filename
	loads polygons from a file.
	ex) load example.txt

-set [param] value
	sets a light option with appropriate variable, available params listed below
	ex)set lpos 3,3,3
	ex)set lcolor 0.2,0.3,0.2
	ex)set lint 5
	ex)set aint 0.2
	ex)set halftone

available [param]
-lpos = light source position, takes a vector

-fpos = from point, takes a vector for position

-lcolor = color of spot light, takes a vector of values between 0 and 1

-acolor = color of ambient light, takes a vector of values between 0 and 1

-lint = spot light intensity, takes a float

-aint = ambient light intensity, takes a float

-matamb = material ambient reflection, takes a vector of values between 0 and 1

-matdif = material diffuse reflection, takes a vector of values between 0 and 1

-matspec = material specular reflection, takes a vector of values between 0 and 1

-phong = phong constant, takes an int

-halftone = toggle half tone

NOTE: Default values set as the following
    lpos = 0,10,0
    fpos = 0,5,0
    lcolor = 1,1,1
    acolor = 1,1,1
    lint = 5
    aint = .8
    matamb = 0.9,0.4,0.6
    matdif = 0.5,0.6,0.8
    matspec = 0.4,0.3,0.6
    phong = 10

////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////i
Algorithm implementation:

Phong Lighting Model
-Renderer.cpp/Phonglighting() line 485 = Phong lighting calculation
-Polygon.cpp/CalculateVertNormal() line 109  = Vertex normal calculation based off of surface normals passed in from text file

Gouraud Shading
-all implmemented in GraphicsAlgorithm.cpp
-LinInterpColor() line 370 = Linear interpolation
-PolyScanLine() lines 89-95 = I rasterize horizontal lines in order from bottom to top for each triangle. I calculate triangle edge colors before rasterizing the line and store the colors keyed by x,y positions in 
-DrawScanLine() line 303 = use edge color values to linearly interpolate the current scan line 

Halftoning
-all implemented in GraphicsAlgorithm.cpp
-HalfTone() line 186 = calculate intensities of each mega pixel in scene then iterate over all megapixels and set them
-SetMegaPixel() line 421 = Sets a megapixel to the appropriate intensity
-GetMegaPixelIntensity line 438 = normalizes all mega pixel intensities and returns them in a vector
-GetMegaPixelIndices() line 489 = given a megapixel index, returns the appropriate pixel buffer indices to be set

Painter's Algorithm
-GraphicsAlgorithm.cpp/PaintersSort() line 148 = sort triangles based off of depth in current projection plane, for example: triangles in plane xy are sorted by the sum of their vertices' z values, higher values are "further" and are rasterized first
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
In/Out file format:
The text file should contain a list of vertices, followed by the polygon face connections, then finished with a list of polygon surface normals.

vertex1
vertex2
   .
   .
   .
vertexN
Faces
face1
face2
face3
   .
   .
   .
faceN
Normals
normal1
normal2
normal3
   .
   .
   .
normalN
End

for each Polygon

ex)
1.0 0.0 0.0
0.0 1.0 0.0
2.0 2.0 0.0
1.0 1.0 2.0
Faces
1 2 3
1 2 4
1 3 4
2 3 4
Normals
0.0 0.0 -3.0
-2.0 -2.0 1.0
4.0 -2.0 1.0
-2.0 4.0 1.0
End

example.txt is an example file with the appropriate format
all data files load from the current directory
////////////////////////////////////////////////////////////////////